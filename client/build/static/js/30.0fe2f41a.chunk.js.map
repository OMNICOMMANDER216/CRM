{"version":3,"sources":["helpers/getBadge.js","helpers/inputTypeSelector.js","views/Folders/Board/Task/TaskItem.js","helpers/inputBuilder.js"],"names":["__webpack_exports__","status","inputTypeSelector","value","TaskItem","_this$props","this","props","task","users","isEditingHandler","saveHandler","changeHandler","editActive","setSideTask","sideTask","removeTask","connectDragSource","react_default","a","createElement","className","_id","onClick","size","color","es","disabled","isEmpty","type","window","confirm","column","map","col","i","index","current","dataType","key","Input","id","name","placeholder","title","undefined","onChange","Badge","getBadge","el","src","alt","width","height","user","firstName","inputBuilder","Component","DragSource","beginDrag","item","endDrag","monitor","component","handleDrop","connect","dragSource","isDragging"],"mappings":"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","file":"static/js/30.0fe2f41a.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary */\nexport default function (status) {\n  return status === 'Live'\n    ? 'success'\n    : status === 'QA'\n      ? 'secondary'\n      : status === 'Assigned'\n        ? 'warning'\n        : status === 'Paid'\n          ? 'primary'\n          : status === 'Low'\n            ? 'primary'\n            : status === 'Medium'\n              ? 'secondary'\n              : status === 'High'\n                ? 'warning'\n                : status === 'Urgent'\n                  ? 'danger'\n                  : status === 'Stuck'\n                    ? 'danger'\n                    : status === 'Working on it'\n                      ? 'info'\n                      : status === 'Waiting for review'\n                        ? 'primary'\n                        : status === 'Waiting on Client'\n                          ? 'warning'\n                          : status === 'Done'\n                            ? 'secondary'\n                            : status === 'Approved'\n                              ? 'success'\n                              : '';\n}\n","export default (value) => {\n    if(value === 'name') return 'text';\n    if(value === 'user' || value === 'status' || value === 'priority') return 'select';\n    if(value === 'user') return 'select';\n    if(value === 'last_updated' || value === 'date') return 'date';\n}","import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd'\nimport inputBuilder from '../../../../helpers/inputBuilder';\nimport { AppAsideToggler } from '@coreui/react';\nimport isEmpty from 'lodash/isEmpty';\n\n\nconst itemSource = {\n  beginDrag(props) {\n    return props.item\n  },\n  endDrag(props, monitor, component) {\n    return props.handleDrop(props.item.id);\n  }\n}\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  }\n}\n\nclass TaskItem extends Component {\n  render(){\n    const { task, users, isEditingHandler, saveHandler, changeHandler, editActive, setSideTask, sideTask, removeTask, connectDragSource } = this.props;\n\n    return connectDragSource(\n          <tr className=\"active\">\n            <td className=\"edit\">\n            { (editActive._id !== task._id) && (\n              \n              <span  \n                onClick={() => isEditingHandler(task)} \n                size=\"md\" \n                color=\"primary\" \n                className=\"m-2\">\n                <AppAsideToggler className=\"d-md-down-none\" disabled={isEmpty(sideTask)}><i className=\"fa fa-pencil\"></i></AppAsideToggler>\n              </span> \n            )}\n            { (editActive._id === task._id) && (\n              <button type=\"submit\" \n                onClick={saveHandler} \n                size=\"md\" \n                color=\"primary\" \n                className=\"m-2\">\n                <i className=\"fa fa-save\"></i> \n              </button> \n            )}\n              <button type=\"submit\"  \n                onClick={() => window.confirm('Are you sure ?') && removeTask(task)}\n                size=\"md\" \n                color=\"primary\" \n                className=\"m-2\">\n                <i className=\"fa fa-trash\"></i> \n              </button>\n              {isEmpty(editActive) && (\n                <span onClick={() => setSideTask(task)}>\n                <AppAsideToggler \n                  className=\"d-md-down-none\" \n                  disabled={!isEmpty(sideTask) && (sideTask._id !== task._id)}>\n                  <i className=\"fa fa-eye\"></i>\n                </AppAsideToggler>\n                </span>\n              )}\n            </td>\n            { task.column && (\n              task.column.map((col, i) => inputBuilder(i, users, col, (editActive._id !== task._id), isEditingHandler, changeHandler)) \n            )}\n          </tr>\n    )\n  }\n}\n\nexport default DragSource('Item', itemSource, collect)(TaskItem);","import React from 'react';\nimport { Input, Badge } from 'reactstrap';\nimport inputTypeSelector from './inputTypeSelector';\nimport getBadge from '../helpers/getBadge';\n\nexport default ( index, users, current, disabled, saveHandler, changeHandler) => {\n    if(current.dataType === 'name' || current.dataType === 'last_updated' || current.dataType === 'date') {\n        return (\n            <td key={index}>\n            <Input type={inputTypeSelector(current.dataType)} \n                id={current._id} \n                name={index} \n                placeholder={current.title}  \n                disabled={disabled}\n                value = {current.value || undefined}\n                onChange={changeHandler} />\n            </td>\n            )\n    }else if(current.dataType === 'status') {\n        return (\n            <td key={index}>\n                <Badge color={getBadge(current.value)}>\n                <Input \n                    type={inputTypeSelector(current.dataType)} \n                    name={index} \n                    id={current._id}\n                    disabled={disabled}\n                    onChange={changeHandler}\n                    value={current.value}>\n                    <option value=\"\"></option>\n                    {['Stuck', 'Working on it', 'Waiting for review', 'Waiting on Client', 'Done', 'Approved'].map(el => <option value={el} key={el}>{el}</option>)}\n                </Input>\n                </Badge>\n            </td>)\n\n    }else if(current.dataType === 'priority') {\n        return (\n            <td key={index}>\n                <Badge color={getBadge(current.value)}>\n                <Input \n                    type={inputTypeSelector(current.dataType)} \n                    name={index} \n                    id={current._id}\n                    disabled={disabled }\n                    onChange={changeHandler}\n                    value={current.value}>\n                    <option value=\"\"></option>\n                    { ['Low', 'Medium', 'High', 'Urgent'].map(el => <option value={el} key={el}>{el}</option>) }\n                </Input>\n                </Badge>\n            </td>)\n    } else if(current.dataType === 'user') {\n        return (\n            <td key={index} >\n            <span className=\"select-td\">\n            <img src=\"https://picsum.photos/200/300\" alt=\"Smiley face\" width=\"35\" height=\"35\"/>\n            {/* <img src={current.value && users.find(u => u._id === current.value).image} alt=\"Smiley face\" width=\"35\" height=\"35\"/> */}\n                <Input \n                    type={inputTypeSelector(current.dataType)} \n                    name={index} \n                    id={current._id}\n                    disabled={disabled }\n                    onChange={changeHandler}\n                    value={current.value}>\n                    <option value=\"\"></option>\n                    {users.map(user => <option value={user._id} key={user._id}>\n                        {user.firstName}\n                    </option>)}\n                </Input>\n                </span>\n            </td>)\n    };\n}"],"sourceRoot":""}