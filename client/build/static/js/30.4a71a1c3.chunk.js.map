{"version":3,"sources":["helpers/getBadge.js","helpers/inputTypeSelector.js","views/Folders/Board/Task/TaskItem.js","helpers/inputBuilder.js"],"names":["__webpack_exports__","status","inputTypeSelector","value","_ref","task","users","isEditingHandler","saveHandler","changeHandler","editActive","setSideTask","sideTask","removeTask","react_default","a","createElement","react","className","_id","type","onClick","size","color","isEmpty","es","disabled","column","map","col","i","index","current","dataType","key","Input","id","name","placeholder","title","undefined","onChange","Badge","getBadge","el","src","alt","width","height","user","firstName","inputBuilder"],"mappings":"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","file":"static/js/30.4a71a1c3.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary */\nexport default function (status) {\n  return status === 'Live'\n    ? 'success'\n    : status === 'QA'\n      ? 'secondary'\n      : status === 'Assigned'\n        ? 'warning'\n        : status === 'Paid'\n          ? 'primary'\n          : status === 'Low'\n            ? 'primary'\n            : status === 'Medium'\n              ? 'secondary'\n              : status === 'High'\n                ? 'warning'\n                : status === 'Urgent'\n                  ? 'danger'\n                  : status === 'Stuck'\n                    ? 'danger'\n                    : status === 'Working on it'\n                      ? 'info'\n                      : status === 'Waiting for review'\n                        ? 'primary'\n                        : status === 'Waiting on Client'\n                          ? 'warning'\n                          : status === 'Done'\n                            ? 'secondary'\n                            : status === 'Approved'\n                              ? 'success'\n                              : '';\n}\n","export default (value) => {\n    if(value === 'name') return 'text';\n    if(value === 'user' || value === 'status' || value === 'priority') return 'select';\n    if(value === 'user') return 'select';\n    if(value === 'last_updated' || value === 'date') return 'date';\n}","import React, { Fragment } from 'react';\nimport inputBuilder from '../../../../helpers/inputBuilder';\nimport { AppAsideToggler } from '@coreui/react';\nimport isEmpty from 'lodash/isEmpty';\n\nexport default ({task, users, isEditingHandler, saveHandler, changeHandler, editActive, setSideTask, sideTask, removeTask}) => {\n\n  return (\n    <Fragment>\n        <tr className=\"active\">\n          <td className=\"edit\">\n          { (editActive._id !== task._id) &&\n            <button type=\"submit\" \n              onClick={() => isEditingHandler(task)} \n              size=\"md\" \n              color=\"primary\" \n              className=\"m-2\">\n              <i className=\"fa fa-pencil\"></i> \n            </button> \n          }\n          { (editActive._id === task._id) &&\n            <button type=\"submit\" \n              onClick={saveHandler} \n              size=\"md\" \n              color=\"primary\" \n              className=\"m-2\">\n              <i className=\"fa fa-save\"></i> \n            </button> \n          }\n            <button type=\"submit\"  \n              onClick={() => removeTask(task)}\n              size=\"md\" \n              color=\"primary\" \n              className=\"m-2\">\n              <i className=\"fa fa-trash\"></i> \n            </button>\n            {isEmpty(editActive) && \n            <AppAsideToggler className=\"d-md-down-none\" disabled={!isEmpty(sideTask) && (sideTask._id !== task._id)}><i  onClick={() => setSideTask(task)} className=\"fa fa-eye\"></i></AppAsideToggler>}\n          </td>\n          { task.column && \n            task.column.map((col, i) => inputBuilder(i, users, col, (editActive._id !== task._id), isEditingHandler, changeHandler)) \n            }\n        </tr>\n        <tr className=\"spacer\"></tr>\n    </Fragment>\n\n    /* <td key={i}> <Input type=\"text\" id=\"name\" name={i} placeholder={col.title}  disabled={editActive !== task._id}  value={col.value} /></td> */\n  )\n}","import React from 'react';\nimport { Input, Badge } from 'reactstrap';\nimport inputTypeSelector from './inputTypeSelector';\nimport getBadge from '../helpers/getBadge';\n\nexport default ( index, users, current, disabled, saveHandler, changeHandler) => {\n    if(current.dataType === 'name' || current.dataType === 'last_updated' || current.dataType === 'date') {\n        return (\n            <td key={index}>\n            <Input type={inputTypeSelector(current.dataType)} \n                id={current._id} \n                name={index} \n                placeholder={current.title}  \n                disabled={disabled}\n                value = {current.value || undefined}\n                onChange={changeHandler} />\n            </td>\n            )\n    }else if(current.dataType === 'status') {\n        return (\n            <td key={index}>\n                <Badge color={getBadge(current.value)}>\n                <Input \n                    type={inputTypeSelector(current.dataType)} \n                    name={index} \n                    id={current._id}\n                    disabled={disabled}\n                    onChange={changeHandler}\n                    value={current.value}>\n                    <option value=\"\"></option>\n                    {['Stuck', 'Working on it', 'Waiting for review', 'Waiting on Client', 'Done', 'Approved'].map(el => <option value={el} key={el}>{el}</option>)}\n                </Input>\n                </Badge>\n            </td>)\n\n    }else if(current.dataType === 'priority') {\n        return (\n            <td key={index}>\n                <Badge color={getBadge(current.value)}>\n                <Input \n                    type={inputTypeSelector(current.dataType)} \n                    name={index} \n                    id={current._id}\n                    disabled={disabled }\n                    onChange={changeHandler}\n                    value={current.value}>\n                    <option value=\"\"></option>\n                    { ['Low', 'Medium', 'High', 'Urgent'].map(el => <option value={el} key={el}>{el}</option>) }\n                </Input>\n                </Badge>\n            </td>)\n    } else if(current.dataType === 'user') {\n        return (\n            <td key={index} >\n            <span className=\"select-td\">\n            <img src=\"https://picsum.photos/200/300\" alt=\"Smiley face\" width=\"35\" height=\"35\"/>\n            {/* <img src={current.value && users.find(u => u._id === current.value).image} alt=\"Smiley face\" width=\"35\" height=\"35\"/> */}\n                <Input \n                    type={inputTypeSelector(current.dataType)} \n                    name={index} \n                    id={current._id}\n                    disabled={disabled }\n                    onChange={changeHandler}\n                    value={current.value}>\n                    <option value=\"\"></option>\n                    {users.map(user => <option value={user._id} key={user._id}>\n                        {user.firstName}\n                    </option>)}\n                </Input>\n                </span>\n            </td>)\n    };\n}"],"sourceRoot":""}