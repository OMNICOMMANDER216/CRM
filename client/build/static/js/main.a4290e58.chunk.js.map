{"version":3,"sources":["helpers/getToken.js","api/foldersApi.js","store/actions/foldersActions.js","store/actionTypes.js","polyfill.js","App.js","serviceWorker.js","store/reducers/initialState.js","store/reducers/index.js","store/reducers/customersReducer.js","store/reducers/usersReducer.js","store/reducers/notificationReducer.js","store/reducers/authReducer.js","store/reducers/folderReducer.js","store/reducers/sideTask.js","index.js","store/store.js","api/boardsApi.js"],"names":["__webpack_exports__","localStorage","getItem","foldersApi","loadFolders","axios","get","then","response","data","loadFoldersSuccess","folders","type","action","LOAD_FOLDERS_SUCCESS","addBoardSuccess","folder","ADD_BOARD","updateBoardSuccess","UPDATE_BOARD","deleteBoardSuccess","DELETE_BOARD","loadFoldersFailed","message","LOAD_FOLDERS_FAILED","moveBoardFailed","dispatch","FolderApi","res","error","addBoard","board","boardApi","updateBoard","deleteBoard","deleteBoardById","_id","moveBoard","newFolderId","__webpack_require__","d","foldersActions_loadFolders","LOAD_CUSTOMERS_SUCCESS","LOAD_CUSTOMERS_FAILED","CREATE_CUSTOMER_SUCCESS","CREATE_CUSTOMER_FAILED","UPDATE_CUSTOMER_SUCCESS","UPDATE_CUSTOMER_FAILED","DELETE_CUSTOMER_SUCCESS","DELETE_CUSTOMER_FAILED","SET_CURRENT_USER","LOAD_USERS_SUCCESS","LOAD_USERS_FAILED","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","LOAD_NOTIFICATIONS_SUCCESS","LOAD_NOTIFICATIONS_FAILED","SET_SIDE_TASK","UPDATE_SIDE_TASK","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","loading","react_default","a","createElement","className","DefaultLayout","Loadable","loader","Promise","all","e","bind","Login","Register","Page404","Page500","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","length","foldersActions","setState","BrowserRouter","Switch","Route","exact","path","name","component","Component","connect","bindActionCreators","Boolean","location","hostname","match","reducers_initialState","users","customers","notifications","auth","isAuthenticated","user","sideTask","combineReducers","arguments","initialState","actions","sort","customer1","customer2","localeCompare","concat","toConsumableArray","assign","customer","filter","id","b","firstName","notification1","notification2","createdAt","isEmpty","folder1","folder2","objectSpread","task","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_helpers_getToken__WEBPACK_IMPORTED_MODULE_1__","token","getToken","boardsApi","post","headers","Content-Type","Authorization","Access-Control-Allow-Methods","mode","loadBoards","loadBoardById","loadBoardsInit","initToken","put","method","addBoardColumn","removeBoardColumn","moveTo","delete","updateBoardAssign"],"mappings":"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","file":"static/js/main.a4290e58.chunk.js","sourcesContent":["export default function() {\n    return localStorage.getItem('jwtToken');\n}\n","import axios from 'axios';\n// import getToken from '../helpers/getToken';\n\n// const token = getToken();\n\nconst foldersApi = {\n            loadFolders: () => axios.get('/api/folders').then(response => response.data)\n};\n\nexport default foldersApi;\n","/* eslint-disable func-names */\nimport action from \"../actionTypes\";\nimport FolderApi from \"../../api/foldersApi\";\nimport boardApi from \"../../api/boardsApi\";\n\nexport function loadFoldersSuccess(folders) {\n  return {\n    type: action.LOAD_FOLDERS_SUCCESS,\n    folders\n  };\n}\n\nexport function addBoardSuccess(folder) {\n  return {\n    type: action.ADD_BOARD,\n    folder\n  };\n}\n\nexport function updateBoardSuccess(folder) {\n  return {\n    type: action.UPDATE_BOARD,\n    folder\n  };\n}\n\nexport function deleteBoardSuccess(folder) {\n  return {\n    type: action.DELETE_BOARD,\n    folder\n  };\n}\n\nexport function loadFoldersFailed(message) {\n  return {\n    type: action.LOAD_FOLDERS_FAILED,\n    message\n  };\n}\n\nexport function moveBoardFailed(message) {\n  return {\n    type: action.LOAD_FOLDERS_FAILED,\n    message\n  };\n}\n\nexport function loadFolders() {\n  return function(dispatch) {\n    try {\n      FolderApi.loadFolders().then(res =>\n        dispatch(loadFoldersSuccess(res.data))\n      );\n    } catch (error) {\n      return dispatch(loadFoldersFailed(error.message));\n    }\n  };\n}\n\nexport function addBoard(board) {\n  return function(dispatch) {\n    try {\n      boardApi.addBoard(board).then(res => dispatch(addBoardSuccess(res.data)));\n    } catch (error) {\n      return dispatch(loadFoldersFailed(error.message));\n    }\n  };\n}\n\nexport function updateBoard(board) {\n  return function(dispatch) {\n    try {\n      boardApi\n        .updateBoard(board)\n        .then(res => dispatch(updateBoardSuccess(res.data)));\n    } catch (error) {\n      return dispatch(loadFoldersFailed(error.message));\n    }\n  };\n}\nexport function deleteBoard(board) {\n  return function(dispatch) {\n    try {\n      boardApi\n        .deleteBoardById(board._id)\n        .then(res => dispatch(deleteBoardSuccess(res.data)));\n    } catch (error) {\n      return dispatch(loadFoldersFailed(error.message));\n    }\n  };\n}\n\nexport function moveBoard(board, newFolderId) {\n  return function(dispatch) {\n    try {\n      boardApi\n        .moveBoard(board, newFolderId)\n        .then(res => dispatch(loadFoldersSuccess(res.data)));\n    } catch (error) {\n      return dispatch(loadFoldersFailed(error.message));\n    }\n  };\n}\n","export default {\n//  Customer Actions //\n  LOAD_CUSTOMERS_SUCCESS: 'LOAD_CUSTOMERS_SUCCESS',\n  LOAD_CUSTOMERS_FAILED: 'LOAD_CUSTOMERS_FAILED',\n  CREATE_CUSTOMER_SUCCESS: 'CREATE_CUSTOMER_SUCCESS',\n  CREATE_CUSTOMER_FAILED: 'CREATE_CUSTOMER_FAILED',\n  UPDATE_CUSTOMER_SUCCESS: 'UPDATE_CUSTOMER_SUCCESS',\n  UPDATE_CUSTOMER_FAILED: 'UPDATE_CUSTOMER_FAILED',\n  DELETE_CUSTOMER_SUCCESS: 'DELETE_CUSTOMER_SUCCESS',\n  DELETE_CUSTOMER_FAILED: 'DELETE_CUSTOMER_FAILED',\n\n\n  // User Actions\n  SET_CURRENT_USER: 'SET_CURRENT_USER',\n  LOAD_USERS_SUCCESS: 'LOAD_USERS_SUCCESS',\n  LOAD_USERS_FAILED: 'LOAD_USERS_FAILED',\n  UPDATE_USER_SUCCESS: 'UPDATE_USER_SUCCESS',\n  UPDATE_USER_FAILED: 'UPDATE_USER_FAILED',\n\n  // NOTIFICATIONs\n  LOAD_NOTIFICATIONS_SUCCESS: null,\n  LOAD_NOTIFICATIONS_FAILED: null,\n\n  // NOTIFICATIONs\n  LOAD_FOLDERS_SUCCESS: 'LOAD_FOLDERS_SUCCESS',\n  LOAD_FOLDERS_FAILED: 'LOAD_FOLDERS_FAILED',\n  ADD_BOARD: 'ADD_BOARD',\n  UPDATE_BOARD: 'UPDATE_BOARD',\n  DELETE_BOARD: 'DELETE_BOARD',\n\n  // Task\n  SET_SIDE_TASK: 'SET_SIDE_TASK',\n  UPDATE_SIDE_TASK: 'UPDATE_SIDE_TASK',\n};\n","/*\n* required polyfills\n*/\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\nimport 'core-js/es6/array'\n// import 'core-js/es6/regexp'\nimport 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\nimport 'core-js/es6/set'\nimport 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Loadable from 'react-loadable';\nimport './App.scss';\nimport 'react-toastify/dist/ReactToastify.css';\nimport * as foldersActions from './store/actions/foldersActions';\n\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\n\n// Containers\nconst DefaultLayout = Loadable({\n  loader: () => import('./containers/DefaultLayout'),\n  loading\n});\n\n// Pages\nconst Login = Loadable({\n  loader: () => import('./views/Pages/Login'),\n  loading\n});\n\nconst Register = Loadable({\n  loader: () => import('./views/Pages/Register'),\n  loading\n});\n\nconst Page404 = Loadable({\n  loader: () => import('./views/Pages/Page404'),\n  loading\n});\n\nconst Page500 = Loadable({\n  loader: () => import('./views/Pages/Page500'),\n  loading\n});\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    if(!this.state.loading && !this.props.folders.length) {\n        this.props.foldersActions.loadFolders();\n        this.setState({loading: true});\n      }\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/login\" name=\"Login Page\" component={Login} />\n            <Route exact path=\"/register\" name=\"Register Page\" component={Register} />\n            <Route exact path=\"/404\" name=\"Page 404\" component={Page404} />\n            <Route exact path=\"/500\" name=\"Page 500\" component={Page500} />\n            <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\n          </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    folders: state.folders\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    foldersActions: bindActionCreators(foldersActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n  users: [],\n  customers: [],\n  notifications: [],\n  folders: [],\n  auth: {\n    isAuthenticated: false,\n    user: {},\n  },\n  sideTask: [],\n  loading: false,\n};\n","import { combineReducers } from 'redux';\nimport customers from './customersReducer';\nimport users from './usersReducer';\nimport auth from './authReducer';\nimport notifications from './notificationReducer';\nimport folders from './folderReducer';\nimport sideTask from './sideTask';\n\nexport default combineReducers({\n  customers,\n  users,\n  notifications,\n  auth,\n  folders,\n  sideTask,\n});\n","import actions from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function customerReducer(state = initialState.customers, action) {\n    switch (action.type) {\n    case actions.LOAD_CUSTOMERS_SUCCESS:\n      return action.customers.sort((customer1, customer2) => customer1.name.localeCompare(customer2.name));\n    case actions.CREATE_CUSTOMER_SUCCESS:\n      return [\n        ...state,\n        Object.assign({}, action.customer)\n        \n      ];\n    case actions.UPDATE_CUSTOMER_SUCCESS:\n      return [\n        ...state.filter(customer => customer._id !== action.customer._id).sort((customer1, customer2) => customer1.name.localeCompare(customer2.name)),\n        Object.assign({}, action.customer)\n      ];\n    case actions.DELETE_CUSTOMER_SUCCESS:\n    \n      return [\n        ...state.filter(customer => customer._id !== action.id).sort((customer1, customer2) => customer1.name.localeCompare(customer2.name))\n      ];\n    default:\n      return state;\n  }\n}","import actions from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function userReducer(state = initialState.users, action) {\n    switch (action.type) {\n    case actions.LOAD_USERS_SUCCESS:\n      return action.users.sort((a, b) => a.firstName.localeCompare(b.firstName));\n    case actions.UPDATE_USER_SUCCESS:\n      return [\n        ...state.filter(user => user._id !== action.user._id), \n        Object.assign({}, action.user)\n      ];\n    default:\n      return state;\n  }\n}\n","import actions from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function notificationReducer(state = initialState.notifications, action) {\n  switch (action.type) {\n    case actions.LOAD_NOTIFICATIONS_SUCCESS:\n      return action.notifications.sort((notification1, notification2) => notification1.createdAt.localeCompare(notification2.createdAt));\n\n    default:\n      return state;\n  }\n}\n","import actions from '../actionTypes';\nimport initialState from './initialState';\nimport isEmpty from 'lodash/isEmpty';\n\nexport default function authReducer(state = initialState.auth, action) {\n  switch(action.type) {\n    case actions.SET_CURRENT_USER:\n        return {\n          isAuthenticated : !isEmpty(action.user),\n          user : action.user\n        };\n    default: return state;\n  }\n}","import actions from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function folderReducer(state = initialState.folders, action) {\n  switch (action.type) {\n    case actions.LOAD_FOLDERS_SUCCESS:\n      return action.folders.sort((folder1, folder2) => folder1.createdAt.localeCompare(folder2.createdAt));\n\n    case actions.ADD_BOARD:\n      return [...state.filter(folder => folder._id !== action.folder._id), action.folder].sort((folder1, folder2) => folder1.createdAt.localeCompare(folder2.createdAt));\n\n    case actions.UPDATE_BOARD:\n      return [...state.filter(folder => folder._id !== action.folder._id), action.folder].sort((folder1, folder2) => folder1.createdAt.localeCompare(folder2.createdAt));\n\n    case actions.DELETE_BOARD:\n      return [...state.filter(folder => folder._id !== action.folder._id), action.folder].sort((folder1, folder2) => folder1.createdAt.localeCompare(folder2.createdAt));\n\n    default:\n      return state;\n  }\n}\n","import actions from '../actionTypes';\nimport initialState from './initialState';\n\nexport default function authReducer(state = initialState.sideTask, action) {\n  switch (action.type) {\n    case actions.SET_SIDE_TASK:\n      return [{ ...action.task }];\n\n    case actions.UPDATE_SIDE_TASK:\n      return [\n        ...state.filter(task => task._id !== action.task._id),\n      ];\n    default: return state;\n  }\n}\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\nimport 'react-app-polyfill/ie11'; // For IE 11 support\nimport { Provider } from 'react-redux';\nimport './polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/store';\n\nconst store = configureStore();\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport rootReducer from './reducers';\n\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(\n      applyMiddleware(thunk, reduxImmutableStateInvariant()),\n    ),\n  );\n}\n","import axios from 'axios';\nimport getToken from '../helpers/getToken';\n\nconst token = getToken();\n\nconst boardsApi = {\n  addBoard: board => axios.post('/api/boards', { data: board, headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}`, 'Access-Control-Allow-Methods': '*' }, mode: 'cors' }).then(res => res.data),\n\n  loadBoards: () => axios.get('/api/boards', { headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` } }).then(response => response.data),\n\n  loadBoardById: id => axios.get(`/api/boards/${id}`, { headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` } }).then(response => response.data),\n\n  loadBoardsInit: initToken => axios.get('/api/boards', { headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${initToken}` } }).then(response => response.data),\n\n  updateBoard: board => axios.put('/api/boards', { method: 'PUT', data: board, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Methods': '*' } }).then(res => res.data),\n\n  addBoardColumn: board => axios.put('/api/boards/data', { method: 'PUT', data: board, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Methods': '*' } }).then(res => res.data),\n\n  removeBoardColumn: data => axios.put('/api/boards/removeColumn', { method: 'PUT', data, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Methods': '*' } }).then(res => res.data),\n\n  moveBoard: (board, newFolderId) => axios.put('/api/boards/moveBoard', {\n    method: 'PUT', data: board, moveTo: newFolderId, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Methods': '*' },\n  }).then(res => res.data),\n\n  deleteBoardById: id => axios.delete(`/api/boards/${id}`, { headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` } }).then(response => response.data),\n\n  updateBoardAssign: board => axios.put('/api/boards/assign', {\n    method: 'PUT', data: board, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Methods': '*' }, mode: 'cors',\n  }).then(res => res.data),\n};\n\nexport default boardsApi;\n"],"sourceRoot":""}