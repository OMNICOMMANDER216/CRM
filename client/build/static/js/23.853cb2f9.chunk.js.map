{"version":3,"sources":["views/Folders/Board/BoardForm.js","views/Folders/Board/BoardModel.js","views/Folders/ManageFolder.js"],"names":["BoardForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","collapse","state","toggleFade","prevState","fadeIn","timeout","_this2","_this$props","folder","board","customers","selectedCustomer","onSave","onChange","updateCustomer","errors","redirect","options","map","customer","value","_id","label","name","react_default","a","createElement","Container","Fragment","className","Row","Col","xs","md","Card","CardHeader","CardBody","Form","action","method","encType","id","ref","el","myFormRef","FormGroup","row","Label","htmlFor","Input","type","placeholder","FormText","color","rows","description","for","react_select_esm","CardFooter","Button","onClick","size","Component","Customer","undefined","columns","groups","ManageBoardPage","context","updateBoard","e","assign","target","saveBoard","event","preventDefault","validateAll","then","saving","foldersActions","addBoard","toDashboard","catch","console","log","formattedErrors","forEach","error","field","message","disabledAdvance","disabledLive","nextProps","location","boardId","boards","find","length","cust","BoardModel","users","Redirect","to","Board_BoardForm","currentUser","React","connect","ownprops","folders","match","params","folder_id","auth","user","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/23.853cb2f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Container,\n} from 'reactstrap';\n\nclass BoardForm extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      collapse: true,\n      fadeIn: true,\n      timeout: 300\n    };\n  }\n\n  \n\n  toggle = () => {\n    this.setState({ collapse: !this.state.collapse });\n  }\n\n  toggleFade = () => {\n    this.setState((prevState) => { return { fadeIn: !prevState }});\n  }\n\n  render() {\n    const { folder, board, customers, selectedCustomer,  onSave, onChange, updateCustomer, errors, redirect} = this.props;\n    const options = customers.map(customer => {\n      return {value: customer._id, label: customer.name}\n    });\n\n\n    return (\n      <Container>\n      {folder && \n      <React.Fragment>\n      <h2> {folder.name} </h2>\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col xs=\"12\" md=\"12\" >\n            <Card>\n              <CardHeader>\n                <strong> Add Board</strong>\n              </CardHeader>\n              <CardBody>\n                <Form action=\"\" method=\"post\" encType=\"multipart/form-data\" id=\"board-form\" ref={(el) => this.myFormRef = el}>\n                      <React.Fragment>\n                      <FormGroup row>\n                        <Col md=\"3\">\n                          <Label htmlFor=\"name\">Board Name</Label>\n                        </Col>\n                        <Col xs=\"12\" md=\"9\">\n                          <Input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Board Name\" onChange={onChange} value={board && board && board.name}/>\n                          <FormText color=\"danger\">{errors.name}</FormText>\n                        </Col>\n                      </FormGroup>\n                      <FormGroup row>\n                        <Col md=\"3\">\n                          <Label htmlFor=\"name\">Board Description</Label>\n                        </Col>\n                        <Col xs=\"12\" md=\"9\">\n                          <Input type=\"textarea\" id=\"description\" name=\"description\" placeholder=\"Board description\" rows=\"7\" onChange={onChange} value={board && board && board.description}/>\n                          <FormText color=\"danger\">{errors.description}</FormText>\n                        </Col>\n                      </FormGroup>\n                      <FormGroup row  className=\"mt-3\"> \n                      <Col md=\"3\">\n                        <Label for=\"pm\">Customer</Label>\n                      </Col>\n                      <Col xs=\"12\" md=\"9\">\n                        <Select\n                          value={selectedCustomer}\n                          onChange={updateCustomer}\n                          options={options}\n                        />\n                        <FormText color=\"danger\">{errors.customer}</FormText>\n                        </Col>\n                      </FormGroup>\n                      </React.Fragment>\n                \n                     \n                </Form>\n              </CardBody>\n              <CardFooter className=\"d-flex justify-content-center\">\n                <Button type=\"submit\" onClick={onSave} size=\"md\" color=\"primary\" className=\"m-2\"><i className=\"fa fa-dot-circle-o\"></i> Submit</Button>\n                <Button type=\"reset\" onClick={redirect} size=\"md\" color=\"danger\" className=\"m-2\"><i className=\"fa fa-ban\"></i> Back</Button>\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n      </React.Fragment>\n      }\n      </Container>\n    );\n  }\n}\n\nexport default BoardForm;\n","let Customer = {\n    _id: undefined,\n    name: \"\",\n    customer: \"\",\n    description: \"\",\n    folder: \"\",\n    columns: [],\n    groups: []\n};\n\nexport default Customer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport  { Redirect } from 'react-router-dom';\nimport BoardForm from './Board/BoardForm';\nimport BoardModel from './Board/BoardModel';\nimport { validateAll } from 'indicative';\nimport * as foldersActions from '../../store/actions/foldersActions';\n\nclass ManageBoardPage extends React.Component { \n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      folder: Object.assign({}, this.props.folder),\n      board: {},\n      selectedCustomer : {},\n      errors: {},\n      saving: false,\n      disabledAdvance: false,\n      disabledLive: false,\n      toDashboard: false,\n      assign: false\n    };\n    \n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.folder && (this.props.folder._id !== nextProps.folder._id)) {\n      // necessary to populate form when existing user is loaded directly.\n      this.setState({ folder: Object.assign({}, nextProps.folder) });\n    }\n  }\n  \n   componentWillMount() {\n\n     if(this.props.location.state && this.props.location.state.boardId) {\n       const id = this.props.location.state.boardId;\n       const board = this.props.folder.boards.find(board => board._id === id);\n       const selectedCustomer = {value: board.customer, label: this.props.customers.length && this.props.customers.find(cust => cust._id === board.customer).name};\n       this.setState({board, selectedCustomer});\n     } else {\n        this.setState({board: BoardModel});\n     }\n    }\n\n    componentDidMount() {\n        this.setState({ users: this.props.users });\n    }\n\n  updateBoard = (e) => { \n    let board = Object.assign({}, this.state.board);\n      board[e.target.name] = e.target.value\n    return this.setState({ board: board });\n  }\n\n  updateCustomer = (e) => { \n    let selectedCustomer = Object.assign({}, this.state.selectedCustomer);\n    let board = Object.assign({}, this.state.board);\n    board.customer = e.value;\n    selectedCustomer = e;\n    return this.setState({ selectedCustomer, board });\n  }\n\n  saveBoard = (event) => {\n    event.preventDefault();\n\n    let board = Object.assign({}, this.state.board);\n    // Set Axios header\n      const rules = {\n        name: 'required|string',\n        customer: 'required|string'\n      };\n\n      validateAll(board, rules)\n        .then(() => {\n              board.folder = this.state.folder._id;\n              this.setState({ saving: true });\n              !board._id && this.props.foldersActions.addBoard(board);\n              board._id && this.props.foldersActions.updateBoard(board);\n              this.setState({ toDashboard: true });\n        })\n        .catch(errors => {  \n          console.log(errors);\n          let formattedErrors = {};\n          errors.forEach(error => formattedErrors[error.field] = error.message);\n          this.setState({errors: formattedErrors});\n        });\n     \n  }\n\n  redirect = () => {\n    this.setState({toDashboard: true});\n  }\n  \n  render() {\n    if(this.state.toDashboard) {\n      return <Redirect to='/dashboard' />\n    }\n    return (    \n        <BoardForm \n        folder={this.props.folder}\n        board={this.state.board}\n        selectedCustomer={this.state.selectedCustomer}\n        customers={this.props.customers}\n        onSave={this.saveBoard}\n        onChange={this.updateBoard}\n        updateCustomer={this.updateCustomer}\n        errors={this.state.errors}\n        saving={this.state.saving}\n        redirect={this.redirect}\n        currentUser={this.props.currentUser}\n      /> \n    );\n  }\n}\nManageBoardPage.propTypes = {\n\n};\n\nconst mapStateToProps = (state, ownprops) => ({\n  folder: state.folders.find(folder => folder._id === ownprops.match.params.folder_id),\n  folders: state.folders, \n  customers: state.customers,\n  currentUser: state.auth.user\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    foldersActions: bindActionCreators(foldersActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageBoardPage);\n"],"sourceRoot":""}